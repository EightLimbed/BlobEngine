// breaks apart vectors and creates a list of their indices for each cardinal direction, before sorting them by that direction.
#version 430 core

layout(local_size_x = min((numPoints+1)/2, 1024), local_size_y = max(1, (numPoints+1)/2048), local_size_z = 1) in;
// ts pmo but ensure local_size_x >= ceil(numPoints / 2) because this sorting algorithm only works with a single thread pool for some reason
// or choose a larger value and idle extra threads. (evil)

layout(std430, binding = 0) buffer ChunkData {
    uint numPoints;
    vec4 points[];
};

layout(std430, binding = 1) buffer ChunkDataSort {
    uint isort[]; // flattened: [0..numPoints-1] = x-indexes, [numPoints..2*numPoints-1] = y-indexes, [2*numPoints..3*numPoints-1] = z-indexes
};

int binarySearch(int a[], int item,
                int low, int high)
{
    if (high <= low)
        return (item > a[low]) ?
                (low + 1) : low;

    int mid = (low + high) / 2;

    if (item == a[mid])
        return mid + 1;

    if (item > a[mid])
        return binarySearch(a, item,
                            mid + 1, high);
    return binarySearch(a, item, low,
                        mid - 1);
}

int main()
{
    int i, loc, j, k, selected;

    for (i = 1; i < n; ++i)
    {
        j = i - 1;
        selected = a[i];

        // find location where selected should be inserted
        loc = binarySearch(a, selected, 0, j);

        // Move all elements after location to create space
        while (j >= loc)
        {
            a[j + 1] = a[j];
            j--;
        }
        a[j + 1] = selected;
    }
}